import * as _unhead_schema from '@unhead/schema';
import { HeadTag, Head, HeadEntryOptions, ActiveHeadEntry, Title, Base, Meta, MetaFlatInput, Link, Script, Style, Noscript, HtmlAttributes, BodyAttributes, TitleTemplate, Unhead, HeadPlugin, CreateHeadOptions, HeadEntry } from '@unhead/schema';
import { Arrayable } from '@unhead/shared';
export * from '@unhead/shared';

declare const TAG_WEIGHTS: {
    readonly critical: 2;
    readonly high: 9;
    readonly low: 12;
    readonly base: -1;
    readonly title: 1;
    readonly meta: 10;
};
declare function tagWeight<T extends HeadTag>(tag: T): any;
declare const SortModifiers: {
    prefix: string;
    offset: number;
}[];
declare function SortTagsPlugin(): _unhead_schema.HeadPlugin;

declare const renderTitleTemplate: (template: string | ((title?: string) => string | null) | null, title?: string) => string | null;
declare const TitleTemplatePlugin: () => _unhead_schema.HeadPlugin;

declare const DeprecatedTagAttrPlugin: () => _unhead_schema.HeadPlugin;

declare const ProvideTagHashPlugin: () => _unhead_schema.HeadPlugin;

/**
 * Supports DOM event handlers (i.e `onload`) as functions.
 *
 * When SSR we need to strip out these values. On CSR we
 */
declare const EventHandlersPlugin: () => _unhead_schema.HeadPlugin;

declare function useHead<T extends Head>(input: T, options?: HeadEntryOptions): ActiveHeadEntry<T> | void;
declare const useTagTitle: (title: Title) => ActiveHeadEntry<any> | void;
declare const useTagBase: (base: Base) => ActiveHeadEntry<any> | void;
declare const useTagMeta: (meta: Arrayable<Meta>) => ActiveHeadEntry<any> | void;
declare const useTagMetaFlat: (meta: MetaFlatInput) => ActiveHeadEntry<any> | void;
declare const useTagLink: (link: Arrayable<Link>) => ActiveHeadEntry<any> | void;
declare const useTagScript: (script: Arrayable<Script>) => ActiveHeadEntry<any> | void;
declare const useTagStyle: (style: Arrayable<Style>) => ActiveHeadEntry<any> | void;
declare const useTagNoscript: (noscript: Arrayable<Noscript>) => ActiveHeadEntry<any> | void;
declare const useHtmlAttrs: (attrs: HtmlAttributes) => ActiveHeadEntry<any> | void;
declare const useBodyAttrs: (attrs: BodyAttributes) => ActiveHeadEntry<any> | void;
declare const useTitleTemplate: (titleTemplate: TitleTemplate) => ActiveHeadEntry<any> | void;

declare function useServerHead<T extends Head>(input: T, options?: HeadEntryOptions): ActiveHeadEntry<T> | void;
declare const useServerTagTitle: (title: Title) => ActiveHeadEntry<any> | void;
declare const useServerTagBase: (base: Base) => ActiveHeadEntry<any> | void;
declare const useServerTagMeta: (meta: Arrayable<Meta>) => ActiveHeadEntry<any> | void;
declare const useServerTagMetaFlat: (meta: MetaFlatInput) => ActiveHeadEntry<any> | void;
declare const useServerTagLink: (link: Arrayable<Link>) => ActiveHeadEntry<any> | void;
declare const useServerTagScript: (script: Arrayable<Script>) => ActiveHeadEntry<any> | void;
declare const useServerTagStyle: (style: Arrayable<Style>) => ActiveHeadEntry<any> | void;
declare const useServerTagNoscript: (noscript: Arrayable<Noscript>) => ActiveHeadEntry<any> | void;
declare const useServerHtmlAttrs: (attrs: HtmlAttributes) => ActiveHeadEntry<any> | void;
declare const useServerBodyAttrs: (attrs: BodyAttributes) => ActiveHeadEntry<any> | void;
declare const useServerTitleTemplate: (titleTemplate: TitleTemplate) => ActiveHeadEntry<any> | void;

type UseSeoMetaInput = MetaFlatInput & {
    title?: Title;
    titleTemplate?: TitleTemplate;
};
declare const useSeoMeta: (input: UseSeoMetaInput) => ActiveHeadEntry<any> | void;

declare let activeHead: Unhead<any> | undefined;
declare const setActiveHead: (head: Unhead<any> | undefined) => Unhead<any> | undefined;
declare const getActiveHead: () => Unhead<any> | undefined;

declare const CorePlugins: () => HeadPlugin[];
declare const DOMPlugins: (options?: CreateHeadOptions) => HeadPlugin[];
declare function createHead<T extends {} = Head>(options?: CreateHeadOptions): Unhead<T>;
/**
 * Creates a core instance of unhead. Does not provide a global ctx for composables to work
 * and does not register DOM plugins.
 *
 * @param options
 */
declare function createHeadCore<T extends {} = Head>(options?: CreateHeadOptions): Unhead<T>;

declare const composableNames: string[];
declare const unheadComposablesImports: {
    from: string;
    imports: string[];
}[];

/**
 * Convert an array of meta entries to a flat object.
 * @param inputs
 */
declare function packMeta<T extends Required<Head>['meta']>(inputs: T): MetaFlatInput;

/**
 * Converts a flat meta object into an array of meta entries.
 * @param input
 */
declare function unpackMeta<T extends MetaFlatInput>(input: T): Required<Head>['meta'];

declare function normaliseTag<T extends HeadTag>(tagName: T['tag'], input: any): Promise<T | T[]>;
declare function normaliseProps<T extends HeadTag['props']>(props: T): Promise<T>;
declare const TagEntityBits = 10;
declare function normaliseEntryTags<T extends {} = Head>(e: HeadEntry<T>): Promise<HeadTag[]>;

declare const PropertyPrefixKeys: RegExp;
declare const ColonPrefixKeys: RegExp;
declare function fixKeyCase(key: string): string;
declare function changeKeyCasingDeep<T extends any>(input: T): T;

export { ColonPrefixKeys, CorePlugins, DOMPlugins, DeprecatedTagAttrPlugin, EventHandlersPlugin, PropertyPrefixKeys, ProvideTagHashPlugin, SortModifiers, SortTagsPlugin, TAG_WEIGHTS, TagEntityBits, TitleTemplatePlugin, UseSeoMetaInput, activeHead, changeKeyCasingDeep, composableNames, createHead, createHeadCore, fixKeyCase, getActiveHead, normaliseEntryTags, normaliseProps, normaliseTag, packMeta, renderTitleTemplate, setActiveHead, tagWeight, unheadComposablesImports, unpackMeta, useBodyAttrs, useHead, useHtmlAttrs, useSeoMeta, useServerBodyAttrs, useServerHead, useServerHtmlAttrs, useServerTagBase, useServerTagLink, useServerTagMeta, useServerTagMetaFlat, useServerTagNoscript, useServerTagScript, useServerTagStyle, useServerTagTitle, useServerTitleTemplate, useTagBase, useTagLink, useTagMeta, useTagMetaFlat, useTagNoscript, useTagScript, useTagStyle, useTagTitle, useTitleTemplate };
